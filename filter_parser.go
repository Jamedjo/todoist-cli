// Code generated by goyacc - DO NOT EDIT.

package main

import __yyfmt__ "fmt"

import (
	"strings"
	"time"
)

type yySymType struct {
	yys   int
	token Token
	expr  Expression
	exprs []Expression
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57381
	yyEofCode          = 57344
	ADDED              = 57348
	AFTER              = 57369
	ALL                = 57365
	ASSIGNED           = 57349
	AT                 = 57380
	BEFORE             = 57368
	BY                 = 57346
	CREATED            = 57367
	DATE               = 57373
	DAYS               = 57363
	DUE                = 57366
	HOURS              = 57357
	LABELS             = 57375
	MONTH_IDENT        = 57355
	NEXT               = 57354
	NO                 = 57372
	NUMBER             = 57353
	ORDINAL            = 57377
	OVER               = 57370
	OVERDUE            = 57371
	PRIORITY           = 57358
	RECURRING          = 57359
	SEARCH             = 57376
	SHARED             = 57351
	STRING             = 57352
	SUBTASK            = 57350
	TIME               = 57374
	TO                 = 57347
	TODAY_IDENT        = 57360
	TOMORROW_IDENT     = 57361
	TWELVE_CLOCK_IDENT = 57356
	VIEW               = 57364
	WEEKDAY            = 57378
	YEAR_NUMBER        = 57379
	YESTERDAY_IDENT    = 57362
	yyErrCode          = 57345

	yyMaxDepth = 200
	yyTabOfs   = -79
)

var (
	yyPrec = map[int]int{
		STRING:      0,
		MONTH_IDENT: 1,
		NUMBER:      2,
		'/':         3,
		'*':         4,
		'&':         5,
		'|':         5,
		'\\':        6,
		',':         7,
		'(':         8,
		')':         8,
		'!':         9,
	}

	yyXLAT = map[int]int{
		38:    0,  // '&' (81x)
		124:   1,  // '|' (81x)
		57344: 2,  // $end (80x)
		44:    3,  // ',' (79x)
		41:    4,  // ')' (77x)
		42:    5,  // '*' (42x)
		46:    6,  // '.' (41x)
		92:    7,  // '\\' (41x)
		57352: 8,  // STRING (41x)
		57353: 9,  // NUMBER (30x)
		57395: 10, // s_special_chars (25x)
		43:    11, // '+' (23x)
		47:    12, // '/' (22x)
		57396: 13, // s_string (15x)
		58:    14, // ':' (11x)
		57355: 15, // MONTH_IDENT (11x)
		57397: 16, // s_time (11x)
		45:    17, // '-' (10x)
		57354: 18, // NEXT (10x)
		57385: 19, // s_date (10x)
		57386: 20, // s_date_year (10x)
		57387: 21, // s_datetime (10x)
		57360: 22, // TODAY_IDENT (10x)
		57361: 23, // TOMORROW_IDENT (10x)
		57362: 24, // YESTERDAY_IDENT (10x)
		57366: 25, // DUE (8x)
		33:    26, // '!' (7x)
		35:    27, // '#' (7x)
		40:    28, // '(' (7x)
		57348: 29, // ADDED (6x)
		57349: 30, // ASSIGNED (6x)
		57380: 31, // AT (6x)
		57367: 32, // CREATED (6x)
		57382: 33, // expr (6x)
		57372: 34, // NO (6x)
		57370: 35, // OVER (6x)
		57371: 36, // OVERDUE (6x)
		57359: 37, // RECURRING (6x)
		57388: 38, // s_label_key (6x)
		57389: 39, // s_no_labels (6x)
		57390: 40, // s_nodate (6x)
		57391: 41, // s_overdue (6x)
		57392: 42, // s_person (6x)
		57393: 43, // s_project_all_key (6x)
		57394: 44, // s_project_key (6x)
		57376: 45, // SEARCH (6x)
		57351: 46, // SHARED (6x)
		57350: 47, // SUBTASK (6x)
		57364: 48, // VIEW (6x)
		57378: 49, // WEEKDAY (6x)
		57379: 50, // YEAR_NUMBER (4x)
		57363: 51, // DAYS (3x)
		57368: 52, // BEFORE (2x)
		57346: 53, // BY (2x)
		57373: 54, // DATE (2x)
		57356: 55, // TWELVE_CLOCK_IDENT (2x)
		57369: 56, // AFTER (1x)
		57365: 57, // ALL (1x)
		57383: 58, // exprs (1x)
		57384: 59, // filter (1x)
		57357: 60, // HOURS (1x)
		57375: 61, // LABELS (1x)
		57377: 62, // ORDINAL (1x)
		57358: 63, // PRIORITY (1x)
		57374: 64, // TIME (1x)
		57347: 65, // TO (1x)
		57381: 66, // $default (0x)
		57345: 67, // error (0x)
	}

	yySymNames = []string{
		"'&'",
		"'|'",
		"$end",
		"','",
		"')'",
		"'*'",
		"'.'",
		"'\\\\'",
		"STRING",
		"NUMBER",
		"s_special_chars",
		"'+'",
		"'/'",
		"s_string",
		"':'",
		"MONTH_IDENT",
		"s_time",
		"'-'",
		"NEXT",
		"s_date",
		"s_date_year",
		"s_datetime",
		"TODAY_IDENT",
		"TOMORROW_IDENT",
		"YESTERDAY_IDENT",
		"DUE",
		"'!'",
		"'#'",
		"'('",
		"ADDED",
		"ASSIGNED",
		"AT",
		"CREATED",
		"expr",
		"NO",
		"OVER",
		"OVERDUE",
		"RECURRING",
		"s_label_key",
		"s_no_labels",
		"s_nodate",
		"s_overdue",
		"s_person",
		"s_project_all_key",
		"s_project_key",
		"SEARCH",
		"SHARED",
		"SUBTASK",
		"VIEW",
		"WEEKDAY",
		"YEAR_NUMBER",
		"DAYS",
		"BEFORE",
		"BY",
		"DATE",
		"TWELVE_CLOCK_IDENT",
		"AFTER",
		"ALL",
		"exprs",
		"filter",
		"HOURS",
		"LABELS",
		"ORDINAL",
		"PRIORITY",
		"TIME",
		"TO",
		"$default",
		"error",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {59, 1},
		2:  {58, 1},
		3:  {58, 3},
		4:  {33, 0},
		5:  {33, 3},
		6:  {33, 3},
		7:  {33, 3},
		8:  {33, 2},
		9:  {33, 2},
		10: {33, 2},
		11: {33, 4},
		12: {33, 2},
		13: {33, 2},
		14: {33, 1},
		15: {33, 1},
		16: {33, 2},
		17: {33, 2},
		18: {33, 1},
		19: {33, 2},
		20: {33, 1},
		21: {33, 4},
		22: {33, 4},
		23: {33, 3},
		24: {33, 4},
		25: {33, 1},
		26: {33, 1},
		27: {33, 1},
		28: {33, 3},
		29: {33, 1},
		30: {33, 1},
		31: {33, 1},
		32: {33, 1},
		33: {10, 2},
		34: {10, 2},
		35: {10, 2},
		36: {10, 2},
		37: {10, 2},
		38: {10, 2},
		39: {10, 1},
		40: {13, 1},
		41: {13, 1},
		42: {13, 1},
		43: {13, 2},
		44: {13, 2},
		45: {13, 2},
		46: {42, 4},
		47: {42, 4},
		48: {42, 4},
		49: {43, 2},
		50: {44, 1},
		51: {38, 1},
		52: {39, 2},
		53: {40, 2},
		54: {40, 3},
		55: {41, 2},
		56: {41, 1},
		57: {21, 2},
		58: {21, 1},
		59: {21, 1},
		60: {21, 3},
		61: {21, 3},
		62: {21, 2},
		63: {20, 5},
		64: {20, 3},
		65: {20, 4},
		66: {20, 3},
		67: {20, 1},
		68: {20, 1},
		69: {20, 1},
		70: {20, 1},
		71: {19, 2},
		72: {19, 3},
		73: {19, 2},
		74: {19, 3},
		75: {16, 3},
		76: {16, 5},
		77: {16, 3},
		78: {16, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [126][]uint16{
		// 0
		{75, 75, 75, 75, 5: 108, 106, 105, 107, 119, 109, 125, 85, 104, 15: 120, 116, 117, 118, 121, 115, 103, 122, 123, 124, 96, 84, 111, 83, 110, 99, 112, 95, 82, 91, 113, 114, 94, 88, 89, 90, 92, 102, 87, 86, 100, 97, 98, 93, 101, 58: 81, 80},
		{2: 79},
		{2: 78, 203},
		{198, 197, 77, 77},
		{75, 75, 4: 75, 108, 106, 105, 107, 119, 109, 125, 85, 104, 15: 120, 116, 117, 118, 121, 115, 103, 122, 123, 124, 96, 84, 111, 83, 110, 99, 112, 95, 201, 91, 113, 114, 94, 88, 89, 90, 92, 102, 87, 86, 100, 97, 98, 93, 101},
		// 5
		{75, 75, 75, 75, 75, 108, 106, 105, 107, 119, 109, 125, 85, 104, 15: 120, 116, 117, 118, 121, 115, 103, 122, 123, 124, 96, 84, 111, 83, 110, 99, 112, 95, 196, 91, 113, 114, 94, 88, 89, 90, 92, 102, 87, 86, 100, 97, 98, 93, 101},
		{5: 108, 106, 105, 107, 10: 109, 13: 195},
		{5: 108, 106, 105, 107, 10: 109, 13: 192},
		{5: 108, 106, 105, 107, 10: 109, 13: 191},
		{5: 108, 106, 105, 107, 10: 109, 13: 190},
		// 10
		{65, 65, 65, 65, 65},
		{64, 64, 64, 64, 64},
		{25: 188, 54: 187, 61: 186, 63: 185, 184},
		{61, 61, 61, 61, 61},
		{57: 183},
		// 15
		{59, 59, 59, 59, 59},
		{52: 180},
		{14: 173, 52: 172, 56: 174},
		{54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53},
		// 20
		{52, 52, 52, 52, 52, 53: 167, 65: 166},
		{14: 164},
		{50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48},
		// 25
		{47, 47, 47, 47, 47, 156, 106, 105, 155, 10: 157},
		{158, 160, 4: 163, 161, 26: 159, 28: 162},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 12: 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 12: 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 12: 38},
		// 30
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 12: 37},
		{53: 152},
		{5: 29, 29, 29, 29, 27: 151},
		{5: 28, 28, 28, 28},
		{25: 150},
		// 35
		{23, 23, 23, 23, 23},
		{21, 21, 21, 21, 21, 9: 149, 11: 125, 16: 148},
		{20, 20, 20, 20, 20},
		{9: 146},
		{9: 144},
		// 40
		{12: 133, 14: 135, 134, 51: 132, 55: 136},
		{9: 128},
		{12, 12, 12, 12, 12, 9: 12, 11: 12},
		{11, 11, 11, 11, 11, 9: 11, 11: 11},
		{10, 10, 10, 10, 10, 9: 10, 11: 10},
		// 45
		{9, 9, 9, 9, 9, 9: 9, 11: 9},
		{9: 126},
		{60: 127},
		{2, 2, 2, 2, 2},
		{8, 8, 8, 8, 8, 9: 8, 11: 8, 50: 129, 62: 130},
		// 50
		{15, 15, 15, 15, 15, 9: 15, 11: 15},
		{7, 7, 7, 7, 7, 9: 7, 11: 7, 50: 131},
		{14, 14, 14, 14, 14, 9: 14, 11: 14},
		{17, 17, 17, 17, 17},
		{9: 141},
		// 55
		{6, 6, 6, 6, 6, 9: 6, 11: 6, 50: 140},
		{9: 137},
		{1, 1, 1, 1, 1},
		{4, 4, 4, 4, 4, 14: 138},
		{9: 139},
		// 60
		{3, 3, 3, 3, 3},
		{13, 13, 13, 13, 13, 9: 13, 11: 13},
		{5, 5, 5, 5, 5, 9: 5, 11: 5, 142},
		{50: 143},
		{16, 16, 16, 16, 16, 9: 16, 11: 16},
		// 65
		{51: 145},
		{18, 18, 18, 18, 18},
		{51: 147},
		{19, 19, 19, 19, 19},
		{22, 22, 22, 22, 22},
		// 70
		{14: 135, 55: 136},
		{24, 24, 24, 24, 24},
		{5: 30, 30, 30, 30},
		{14: 153},
		{5: 108, 106, 105, 107, 10: 109, 13: 154},
		// 75
		{31, 31, 31, 31, 31, 156, 106, 105, 155, 10: 157},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 12: 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 12: 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 12: 34},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 12: 46},
		// 80
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 12: 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 12: 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 12: 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 12: 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 12: 41},
		// 85
		{5: 108, 106, 105, 107, 10: 109, 13: 165},
		{51, 51, 51, 51, 51, 156, 106, 105, 155, 10: 157},
		{14: 170},
		{14: 168},
		{5: 108, 106, 105, 107, 10: 109, 13: 169},
		// 90
		{32, 32, 32, 32, 32, 156, 106, 105, 155, 10: 157},
		{5: 108, 106, 105, 107, 10: 109, 13: 171},
		{33, 33, 33, 33, 33, 156, 106, 105, 155, 10: 157},
		{14: 178},
		{9: 119, 11: 125, 15: 120, 116, 117, 118, 121, 115, 177, 122, 123, 124},
		// 95
		{14: 175},
		{9: 119, 11: 125, 15: 120, 116, 117, 118, 121, 115, 176, 122, 123, 124},
		{55, 55, 55, 55, 55},
		{56, 56, 56, 56, 56},
		{9: 119, 11: 125, 15: 120, 116, 117, 118, 121, 115, 179, 122, 123, 124},
		// 100
		{57, 57, 57, 57, 57},
		{14: 181},
		{9: 119, 11: 125, 15: 120, 116, 117, 118, 121, 115, 182, 122, 123, 124},
		{58, 58, 58, 58, 58},
		{60, 60, 60, 60, 60},
		// 105
		{63, 63, 63, 63, 63},
		{62, 62, 62, 62, 62},
		{27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26},
		{54: 189},
		// 110
		{25, 25, 25, 25, 25},
		{66, 66, 66, 66, 66, 156, 106, 105, 155, 10: 157},
		{67, 67, 67, 67, 67, 156, 106, 105, 155, 10: 157},
		{69, 69, 69, 69, 69, 156, 106, 105, 155, 10: 157, 12: 193},
		{5: 108, 106, 105, 107, 10: 109, 13: 194},
		// 115
		{68, 68, 68, 68, 68, 156, 106, 105, 155, 10: 157},
		{70, 70, 70, 70, 70, 156, 106, 105, 155, 10: 157},
		{71, 71, 71, 71, 71},
		{75, 75, 75, 75, 75, 108, 106, 105, 107, 119, 109, 125, 85, 104, 15: 120, 116, 117, 118, 121, 115, 103, 122, 123, 124, 96, 84, 111, 83, 110, 99, 112, 95, 200, 91, 113, 114, 94, 88, 89, 90, 92, 102, 87, 86, 100, 97, 98, 93, 101},
		{75, 75, 75, 75, 75, 108, 106, 105, 107, 119, 109, 125, 85, 104, 15: 120, 116, 117, 118, 121, 115, 103, 122, 123, 124, 96, 84, 111, 83, 110, 99, 112, 95, 199, 91, 113, 114, 94, 88, 89, 90, 92, 102, 87, 86, 100, 97, 98, 93, 101},
		// 120
		{73, 73, 73, 73, 73},
		{74, 74, 74, 74, 74},
		{198, 197, 4: 202},
		{72, 72, 72, 72, 72},
		{75, 75, 75, 75, 5: 108, 106, 105, 107, 119, 109, 125, 85, 104, 15: 120, 116, 117, 118, 121, 115, 103, 122, 123, 124, 96, 84, 111, 83, 110, 99, 112, 95, 204, 91, 113, 114, 94, 88, 89, 90, 92, 102, 87, 86, 100, 97, 98, 93, 101},
		// 125
		{198, 197, 76, 76},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 67

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*Lexer).result = yyS[yypt-0].exprs
		}
	case 2:
		{
			yyVAL.exprs = []Expression{yyS[yypt-0].expr}
		}
	case 3:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 4:
		{
			yyVAL.expr = VoidExpr{}
		}
	case 5:
		{
			yyVAL.expr = BoolInfixOpExpr{left: yyS[yypt-2].expr, operator: '|', right: yyS[yypt-0].expr}
		}
	case 6:
		{
			yyVAL.expr = BoolInfixOpExpr{left: yyS[yypt-2].expr, operator: '&', right: yyS[yypt-0].expr}
		}
	case 7:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 8:
		{
			yyVAL.expr = NotOpExpr{expr: yyS[yypt-0].expr}
		}
	case 9:
		{
			yyVAL.expr = SectionExpr{section: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 10:
		{
			yyVAL.expr = ProjectExpr{isAll: false, name: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 11:
		{
			name := yyS[yypt-2].expr.(StringExpr).String()
			section := yyS[yypt-0].expr.(StringExpr).String()
			left := ProjectExpr{isAll: false, name: name}
			right := SectionExpr{section: section}
			yyVAL.expr = BoolInfixOpExpr{left: left, operator: '|', right: right}
		}
	case 12:
		{
			yyVAL.expr = ProjectExpr{isAll: true, name: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 13:
		{
			yyVAL.expr = LabelExpr{name: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 14:
		{
			yyVAL.expr = LabelExpr{name: ""}
		}
	case 15:
		{
			yyVAL.expr = DateExpr{operation: NO_DUE_DATE}
		}
	case 16:
		{
			yyVAL.expr = DateExpr{operation: NO_TIME}
		}
	case 17:
		{
			yyVAL.expr = NoPriorityExpr{}
		}
	case 18:
		{
			yyVAL.expr = DateExpr{allDay: false, datetime: now(), operation: DUE_BEFORE}
		}
	case 19:
		{
			yyVAL.expr = ViewAllExpr{}
		}
	case 20:
		{
			yyVAL.expr = RecurringExpr{}
		}
	case 21:
		{
			e := yyS[yypt-0].expr.(DateExpr)
			e.operation = CREATED_BEFORE
			yyVAL.expr = e
		}
	case 22:
		{
			e := yyS[yypt-0].expr.(DateExpr)
			e.operation = DUE_BEFORE
			yyVAL.expr = e
		}
	case 23:
		{
			e := yyS[yypt-0].expr.(DateExpr)
			e.operation = DUE_ON
			yyVAL.expr = e
		}
	case 24:
		{
			e := yyS[yypt-0].expr.(DateExpr)
			e.operation = DUE_AFTER
			yyVAL.expr = e
		}
	case 25:
		{
			yyVAL.expr = SharedExpr{}
		}
	case 26:
		{
			yyVAL.expr = SubtaskExpr{}
		}
	case 27:
		{
			yyVAL.expr = AssignedExpr{}
		}
	case 28:
		{
			yyVAL.expr = SearchExpr{keyword: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 29:
		{
			yyVAL.expr = WeekdayExpr{day: WeekdayHash[strings.ToLower(yyS[yypt-0].token.literal)]}
		}
	case 33:
		{
			yyVAL.expr = "&"
		}
	case 34:
		{
			yyVAL.expr = "!"
		}
	case 35:
		{
			yyVAL.expr = `\|`
		}
	case 36:
		{
			yyVAL.expr = `\*`
		}
	case 37:
		{
			yyVAL.expr = `\(`
		}
	case 38:
		{
			yyVAL.expr = `\)`
		}
	case 39:
		{
			yyVAL.expr = `\.`
		}
	case 40:
		{
			yyVAL.expr = NewStringExpr(yyS[yypt-0].token.literal)
		}
	case 41:
		{
			yyVAL.expr = NewStringExpr(".*")
		}
	case 42:
		{
			yyVAL.expr = NewStringExpr(yyS[yypt-0].expr.(string))
		}
	case 43:
		{
			yyVAL.expr = yyS[yypt-1].expr.(StringExpr).Add(NewStringExpr(yyS[yypt-0].token.literal))
		}
	case 44:
		{
			yyVAL.expr = yyS[yypt-1].expr.(StringExpr).Add(NewStringExpr(".*"))
		}
	case 45:
		{
			yyVAL.expr = yyS[yypt-1].expr.(StringExpr).Add(NewStringExpr(yyS[yypt-0].expr.(string)))
		}
	case 46:
		{
			yyVAL.expr = PersonExpr{operation: ASSIGNED_TO, person: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 47:
		{
			yyVAL.expr = PersonExpr{operation: ASSIGNED_BY, person: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 48:
		{
			yyVAL.expr = PersonExpr{operation: ADDED_BY, person: yyS[yypt-0].expr.(StringExpr).String()}
		}
	case 49:
		{
			yyVAL.expr = yyS[yypt-1].token
		}
	case 50:
		{
			yyVAL.expr = yyS[yypt-0].token
		}
	case 51:
		{
			yyVAL.expr = yyS[yypt-0].token
		}
	case 52:
		{
			yyVAL.expr = yyS[yypt-1].token
		}
	case 53:
		{
			yyVAL.expr = yyS[yypt-1].token
		}
	case 54:
		{
			yyVAL.expr = yyS[yypt-2].token
		}
	case 55:
		{
			yyVAL.expr = yyS[yypt-1].token
		}
	case 56:
		{
			yyVAL.expr = yyS[yypt-0].token
		}
	case 57:
		{
			date := yyS[yypt-1].expr.(time.Time)
			time := yyS[yypt-0].expr.(time.Duration)
			yyVAL.expr = DateExpr{allDay: false, datetime: date.Add(time)}
		}
	case 58:
		{
			yyVAL.expr = DateExpr{allDay: true, datetime: yyS[yypt-0].expr.(time.Time)}
		}
	case 59:
		{
			nd := now().Sub(today())
			d := yyS[yypt-0].expr.(time.Duration)
			if d <= nd {
				d = d + time.Duration(int64(time.Hour)*24)
			}
			yyVAL.expr = DateExpr{allDay: false, datetime: today().Add(d)}
		}
	case 60:
		{
			date := today().AddDate(0, 0, -atoi(yyS[yypt-1].token.literal))
			yyVAL.expr = DateExpr{allDay: true, datetime: date, operation: DUE_BEFORE}
		}
	case 61:
		{
			date := today().AddDate(0, 0, atoi(yyS[yypt-1].token.literal))
			yyVAL.expr = DateExpr{allDay: true, datetime: date, operation: DUE_BEFORE}
		}
	case 62:
		{
			date := today().AddDate(0, 0, atoi(yyS[yypt-1].token.literal))
			yyVAL.expr = DateExpr{allDay: true, datetime: date, operation: DUE_BEFORE}
		}
	case 63:
		{
			yyVAL.expr = time.Date(atoi(yyS[yypt-0].token.literal), time.Month(atoi(yyS[yypt-4].token.literal)), atoi(yyS[yypt-2].token.literal), 0, 0, 0, 0, timezone())
		}
	case 64:
		{
			yyVAL.expr = time.Date(atoi(yyS[yypt-0].token.literal), MonthIdentHash[strings.ToLower(yyS[yypt-2].token.literal)], atoi(yyS[yypt-1].token.literal), 0, 0, 0, 0, timezone())
		}
	case 65:
		{
			yyVAL.expr = time.Date(atoi(yyS[yypt-0].token.literal), MonthIdentHash[strings.ToLower(yyS[yypt-3].token.literal)], atoi(yyS[yypt-2].token.literal), 0, 0, 0, 0, timezone())
		}
	case 66:
		{
			yyVAL.expr = time.Date(atoi(yyS[yypt-0].token.literal), MonthIdentHash[strings.ToLower(yyS[yypt-1].token.literal)], atoi(yyS[yypt-2].token.literal), 0, 0, 0, 0, timezone())
		}
	case 67:
		{
			tod := today()
			date := yyS[yypt-0].expr.(time.Time)
			if date.Before(tod) {
				date = date.AddDate(1, 0, 0)
			}
			yyVAL.expr = date
		}
	case 68:
		{
			yyVAL.expr = today()
		}
	case 69:
		{
			yyVAL.expr = today().AddDate(0, 0, 1)
		}
	case 70:
		{
			yyVAL.expr = today().AddDate(0, 0, -1)
		}
	case 71:
		{
			yyVAL.expr = time.Date(today().Year(), MonthIdentHash[strings.ToLower(yyS[yypt-1].token.literal)], atoi(yyS[yypt-0].token.literal), 0, 0, 0, 0, timezone())
		}
	case 72:
		{
			yyVAL.expr = time.Date(today().Year(), MonthIdentHash[strings.ToLower(yyS[yypt-2].token.literal)], atoi(yyS[yypt-1].token.literal), 0, 0, 0, 0, timezone())
		}
	case 73:
		{
			yyVAL.expr = time.Date(today().Year(), MonthIdentHash[strings.ToLower(yyS[yypt-0].token.literal)], atoi(yyS[yypt-1].token.literal), 0, 0, 0, 0, timezone())
		}
	case 74:
		{
			yyVAL.expr = time.Date(now().Year(), time.Month(atoi(yyS[yypt-0].token.literal)), atoi(yyS[yypt-2].token.literal), 0, 0, 0, 0, timezone())
		}
	case 75:
		{
			yyVAL.expr = time.Duration(int64(time.Hour)*int64(atoi(yyS[yypt-2].token.literal)) + int64(time.Minute)*int64(atoi(yyS[yypt-0].token.literal)))
		}
	case 76:
		{
			yyVAL.expr = time.Duration(int64(time.Hour)*int64(atoi(yyS[yypt-4].token.literal)) + int64(time.Minute)*int64(atoi(yyS[yypt-2].token.literal)) + int64(time.Second)*int64(atoi(yyS[yypt-0].token.literal)))
		}
	case 77:
		{
			yyVAL.expr = time.Duration(int64(time.Hour) * int64(atoi(yyS[yypt-1].token.literal)))
		}
	case 78:
		{
			hour := atoi(yyS[yypt-1].token.literal)
			if TwelveClockIdentHash[yyS[yypt-0].token.literal] {
				hour = hour + 12
			}
			yyVAL.expr = time.Duration(int64(time.Hour) * int64(hour))
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
